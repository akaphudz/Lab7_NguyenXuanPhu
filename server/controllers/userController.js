const jwt = require("jsonwebtoken");
const User = require("../models/userModel");
const nodemailer = require("nodemailer");

// T·∫°o JWT token
const generateToken = (id) => {
  return jwt.sign({ id }, process.env.JWT_SECRET, { expiresIn: "1h" });
};

// T·∫°o m√£ x√°c th·ª±c 6 ch·ªØ s·ªë
const generateVerificationCode = () => {
  return Math.floor(100000 + Math.random() * 900000).toString();
};

// G·ª≠i m√£ x√°c th·ª±c qua email
const sendVerificationEmail = async (email, verificationCode) => {
  const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    },
  });

  const mailOptions = {
    from: process.env.EMAIL_USER,
    to: email,
    subject: "X√°c th·ª±c t√†i kho·∫£n",
    html: `
      <div style="text-align: center;">
        <h1 style="color: Black;">‚ú®Welcome to Shopping Online‚ú®</h1>
       <div style="border: 2px solid #a6a6a6; padding: 20px; border-radius: 10px;">
         <p style="color: #a6a6a6;">Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Shopping Online!</p>
         <p style="color: #a6a6a6;">B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng m√£ x√°c th·ª±c n√†y ƒë·ªÉ ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n c·ªßa b·∫°n trong 1 ti·∫øng.</p>
         <p style="color: #a6a6a6;">C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n!</p>
         <p style="color: #a6a6a6;">M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: <strong style="color: Black;">${verificationCode}</strong></p>
         <h4 style="color: #a6a6a6;">Shopping Online Services Team üöÄ</h4>
       </div>
      </div>
    `,
  };

  await transporter.sendMail(mailOptions);
};

// ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
const registerUser = async (req, res) => {
  const { name, email, password } = req.body;

  const userExists = await User.findOne({ email });
  if (userExists) {
    return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
  }

  const verificationCode = generateVerificationCode();

  const user = await User.create({
    name,
    email,
    password,
    role: "user",
    verificationCode,
    isVerified: false,
  });

  if (user) {
    await sendVerificationEmail(user.email, verificationCode); // G·ª≠i m√£ qua email
    res.status(201).json({
      _id: user._id,
      name: user.name,
      email: user.email,
      token: generateToken(user._id),
      message: "M√£ x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email",
    });
  } else {
    res.status(400).json({ message: "Kh√¥ng th·ªÉ t·∫°o ng∆∞·ªùi d√πng" });
  }
};

// ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
const loginUser = async (req, res) => {
  const { email, password } = req.body;

  const user = await User.findOne({ email });
  if (user && (await user.matchPassword(password))) {
    if (!user.isVerified) {
      return res.status(400).json({ message: "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c" });
    }

    res.json({
      _id: user._id,
      name: user.name,
      email: user.email,
      role: user.role,
      token: generateToken(user._id),
    });
  } else {
    res.status(401).json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
  }
};

// X√°c th·ª±c t√†i kho·∫£n b·∫±ng m√£ t·ª´ email
const verifyUser = async (req, res) => {
  const { email, verificationCode } = req.body;

  const user = await User.findOne({ email });

  if (user && user.verificationCode === verificationCode) {
    user.isVerified = true;
    await user.save();
    res.json({ message: "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng!" });
  } else {
    res.status(400).json({ message: "M√£ x√°c th·ª±c kh√¥ng ch√≠nh x√°c" });
  }
};
// Xo√° t·∫•t c·∫£ ng∆∞·ªùi d√πng
const deleteAllUsers = async (req, res) => {
  try {
    await User.deleteMany({}); // X√≥a t·∫•t c·∫£ c√°c t√†i kho·∫£n ng∆∞·ªùi d√πng
    res.json({ message: "T·∫•t c·∫£ t√†i kho·∫£n ng∆∞·ªùi d√πng ƒë√£ b·ªã x√≥a" });
  } catch (error) {
    res
      .status(500)
      .json({ message: "L·ªói khi x√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng", error });
  }
};

module.exports = { registerUser, loginUser, verifyUser, deleteAllUsers };
